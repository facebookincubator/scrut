"use strict";(self.webpackChunkstaticdocs_starter=self.webpackChunkstaticdocs_starter||[]).push([[6700],{19466:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"What is Scrut?","href":"/scrut/docs/","docId":"README","unlisted":false},{"type":"category","label":"Getting Started","collapsible":false,"collapsed":false,"items":[{"type":"link","label":"Installation","href":"/scrut/docs/getting-started/installation","docId":"getting-started/installation","unlisted":false},{"type":"link","label":"First Steps","href":"/scrut/docs/getting-started/first-steps","docId":"getting-started/first-steps","unlisted":false}],"href":"/scrut/docs/getting-started/"},{"type":"category","label":"In-Depth Tutorial","collapsible":false,"collapsed":false,"items":[{"type":"link","label":"What to test?","href":"/scrut/docs/tutorial/what-to-test","docId":"tutorial/what-to-test","unlisted":false},{"type":"link","label":"Test Creation","href":"/scrut/docs/tutorial/create-test","docId":"tutorial/create-test","unlisted":false},{"type":"link","label":"Basic Expectations","href":"/scrut/docs/tutorial/basic-expectations","docId":"tutorial/basic-expectations","unlisted":false},{"type":"link","label":"Output Expectations","href":"/scrut/docs/tutorial/output-expectations","docId":"tutorial/output-expectations","unlisted":false},{"type":"link","label":"Test Environment","href":"/scrut/docs/tutorial/test-environment","docId":"tutorial/test-environment","unlisted":false},{"type":"link","label":"Test Configuration","href":"/scrut/docs/tutorial/test-configuration","docId":"tutorial/test-configuration","unlisted":false},{"type":"link","label":"Test Bootstrapping","href":"/scrut/docs/tutorial/test-bootstrapping","docId":"tutorial/test-bootstrapping","unlisted":false},{"type":"link","label":"Test Maintenance","href":"/scrut/docs/tutorial/test-maintenance","docId":"tutorial/test-maintenance","unlisted":false},{"type":"link","label":"Next Up","href":"/scrut/docs/tutorial/next-up","docId":"tutorial/next-up","unlisted":false}],"href":"/scrut/docs/tutorial/"},{"type":"category","label":"Integration","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Scrut in Docker Container","href":"/scrut/docs/integration/docker","docId":"integration/docker","unlisted":false},{"type":"link","label":"Dotslash and Version Pinning","href":"/scrut/docs/integration/dotslash","docId":"integration/dotslash","unlisted":false},{"type":"link","label":"Scrut in GitHub Action","href":"/scrut/docs/integration/github-action","docId":"integration/github-action","unlisted":false}]},{"type":"category","label":"Reference","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"Fundamentals","collapsible":false,"collapsed":false,"items":[{"type":"link","label":"Environment Variables","href":"/scrut/docs/reference/fundamentals/environment-variables","docId":"reference/fundamentals/environment-variables","unlisted":false},{"type":"link","label":"Inline Configuration","href":"/scrut/docs/reference/fundamentals/inline-configuration","docId":"reference/fundamentals/inline-configuration","unlisted":false},{"type":"link","label":"Output Expectations","href":"/scrut/docs/reference/fundamentals/output-expectations","docId":"reference/fundamentals/output-expectations","unlisted":false},{"type":"link","label":"Shell Expressions","href":"/scrut/docs/reference/fundamentals/shell-expression","docId":"reference/fundamentals/shell-expression","unlisted":false},{"type":"link","label":"Test Case","href":"/scrut/docs/reference/fundamentals/test-case","docId":"reference/fundamentals/test-case","unlisted":false},{"type":"link","label":"Test Document","href":"/scrut/docs/reference/fundamentals/test-document","docId":"reference/fundamentals/test-document","unlisted":false},{"type":"link","label":"Test Output","href":"/scrut/docs/reference/fundamentals/test-output","docId":"reference/fundamentals/test-output","unlisted":false}]},{"type":"category","label":"Formats","collapsible":false,"collapsed":false,"items":[{"type":"link","label":"Cram Format","href":"/scrut/docs/reference/formats/cram-format","docId":"reference/formats/cram-format","unlisted":false},{"type":"link","label":"Markdown Format","href":"/scrut/docs/reference/formats/markdown-format","docId":"reference/formats/markdown-format","unlisted":false}]},{"type":"category","label":"Behavior","collapsible":false,"collapsed":false,"items":[{"type":"link","label":"Execution Model","href":"/scrut/docs/reference/behavior/execution-model","docId":"reference/behavior/execution-model","unlisted":false},{"type":"link","label":"Exit Codes","href":"/scrut/docs/reference/behavior/exit-codes","docId":"reference/behavior/exit-codes","unlisted":false},{"type":"link","label":"Newline handling","href":"/scrut/docs/reference/behavior/newline-handling","docId":"reference/behavior/newline-handling","unlisted":false},{"type":"link","label":"STDOUT and STDERR","href":"/scrut/docs/reference/behavior/stdout-and-stderr","docId":"reference/behavior/stdout-and-stderr","unlisted":false},{"type":"link","label":"Working Directory","href":"/scrut/docs/reference/behavior/working-directory","docId":"reference/behavior/working-directory","unlisted":false}]},{"type":"link","label":"Custom Shell","href":"/scrut/docs/reference/custom-shell","docId":"reference/custom-shell","unlisted":false}]}]},"docs":{"getting-started/first-steps":{"id":"getting-started/first-steps","title":"First Steps","description":"Now that you have a scrut binary installed the fun can begin.","sidebar":"tutorialSidebar"},"getting-started/index":{"id":"getting-started/index","title":"Getting Started","description":"Welcome to Scrut! Let\'s get you sorted.","sidebar":"tutorialSidebar"},"getting-started/installation":{"id":"getting-started/installation","title":"Installation","description":"We provide a couple of different ways to install Scrut. Choose whatever fits best for you:","sidebar":"tutorialSidebar"},"integration/docker":{"id":"integration/docker","title":"Scrut in Docker Container","description":"Scrut can be run in a Docker container. This is useful when integrating into CI/CD or if no local Rust development environment is available.","sidebar":"tutorialSidebar"},"integration/dotslash":{"id":"integration/dotslash","title":"Dotslash and Version Pinning","description":"On the GitHub release page of Scrut you will find a file  named scrut. This is a Dotslash file. Dotslash is a command line tool that is designed to fetch, verify and execute arbitrary other command line tools.","sidebar":"tutorialSidebar"},"integration/github-action":{"id":"integration/github-action","title":"Scrut in GitHub Action","description":"Currently there is no official Scrut GitHub Action, but you can manually run Scrut. Following an example how that can look like:","sidebar":"tutorialSidebar"},"README":{"id":"README","title":"What is Scrut?","description":"Scrut is a CLI testing toolkit designed to rigorously test terminal programs. It is inspired by Cram and focuses on providing a straightforward way to validate CLI behavior.","sidebar":"tutorialSidebar"},"reference/behavior/execution-model":{"id":"reference/behavior/execution-model","title":"Execution Model","description":"A Scrut test document can contain arbitrary amounts of test cases. Scrut provides a shared execution environment for all executions from a single document, which results in certain behaviors and side-effects that should be known:","sidebar":"tutorialSidebar"},"reference/behavior/exit-codes":{"id":"reference/behavior/exit-codes","title":"Exit Codes","description":"The expected exit code of a shell expression in a test case can be denoted with a integer in square brackets. For example:","sidebar":"tutorialSidebar"},"reference/behavior/newline-handling":{"id":"reference/behavior/newline-handling","title":"Newline handling","description":"Newline endings is a sad story in computer history. In Unix / MacOS ( / \\\\*BSD / Amiga / ...) the standard line ending is the line feed (LF) character \\\\n. Microsoft DOS (also Palm OS and OS/2?) infamously attempted to make a combination of carriage return (CR) and line feed the standard: CRLF (\\\\r\\\\n). This made everybody mad - and they still are.","sidebar":"tutorialSidebar"},"reference/behavior/stdout-and-stderr":{"id":"reference/behavior/stdout-and-stderr","title":"STDOUT and STDERR","description":"Commands-line applications can generate output on to two streams: STDOUT and STDERR. There is no general agreement on which stream is supposed to contain what kind of data, but commonly STDOUT contains the primary output and STDERR contains logs, debug messages, etc. This is also the recommendation of the CLI guidelines.","sidebar":"tutorialSidebar"},"reference/behavior/working-directory":{"id":"reference/behavior/working-directory","title":"Working Directory","description":"By default Scrut executes all tests in a dedicated directory per test document. This means all test cases within one document are being executed in the same directory. The directory is created within the system temporary directory. It will be removed (including all the files or directories that the tests may have created) after all tests in the file are executed - or if the execution of the file fails for any reason.","sidebar":"tutorialSidebar"},"reference/custom-shell":{"id":"reference/custom-shell","title":"Custom Shell","description":"While Scrut currently only supports bash (>= 3.2) a custom shell can be provided with the --shell command line parameter.","sidebar":"tutorialSidebar"},"reference/formats/cram-format":{"id":"reference/formats/cram-format","title":"Cram Format","description":"For new tests, prefer using the Markdown format which was introduced with two goals in mind:","sidebar":"tutorialSidebar"},"reference/formats/markdown-format":{"id":"reference/formats/markdown-format","title":"Markdown Format","description":"We chose Markdown as the primary test fle format for Scrut, because it is an amazingly simple, yet powerful language that is easily usable for humans. It is already supported by many tools and editors and it lends itself to write documentation and tests in the same location.","sidebar":"tutorialSidebar"},"reference/fundamentals/environment-variables":{"id":"reference/fundamentals/environment-variables","title":"Environment Variables","description":"Scrut sets some environment variables when executing tests. They are set just before executing individual test cases in a test document. While they can be overwritten within a test case, they are set anew for each test case.","sidebar":"tutorialSidebar"},"reference/fundamentals/inline-configuration":{"id":"reference/fundamentals/inline-configuration","title":"Inline Configuration","description":"Scrut support two kinds of inline configuration syntax:","sidebar":"tutorialSidebar"},"reference/fundamentals/output-expectations":{"id":"reference/fundamentals/output-expectations","title":"Output Expectations","description":"Output expectations are predictions of one or more lines of output. What you think a command will print out when you execute it. My expectation when I execute uname is that the operating system name is printed out to the shell. On a mac, I expect the following:","sidebar":"tutorialSidebar"},"reference/fundamentals/shell-expression":{"id":"reference/fundamentals/shell-expression","title":"Shell Expressions","description":"At the core of any Scrut test case is a command line that is being tested. It can be a single command, a sequence of commands spanning multiple lines or anything else could possibly be written or pasted on the command line and executed. This command line is called a shell expression.","sidebar":"tutorialSidebar"},"reference/fundamentals/test-case":{"id":"reference/fundamentals/test-case","title":"Test Case","description":"Each test document contains zero or more test cases.","sidebar":"tutorialSidebar"},"reference/fundamentals/test-document":{"id":"reference/fundamentals/test-document","title":"Test Document","description":"Test documents are the files that contain the instructions of what ought to be tested and how to test it. They are the main entry point for working with scrut from the command line. All test documents contain zero or more test cases.","sidebar":"tutorialSidebar"},"reference/fundamentals/test-output":{"id":"reference/fundamentals/test-output","title":"Test Output","description":"Executing a test document with Scrut results either in success (when all expectations in the test match) or failure (when at least one expectation in the test document does not match).","sidebar":"tutorialSidebar"},"tutorial/basic-expectations":{"id":"tutorial/basic-expectations","title":"Basic Expectations","description":"The smoke test from the previous chapter validates that executing jq --version will output the string jq-1.7. While this is a good start, it also has a few problems:","sidebar":"tutorialSidebar"},"tutorial/create-test":{"id":"tutorial/create-test","title":"Test Creation","description":"As previously decided, the first test will validate that jq --version executes successfully. Running this command should produce output similar to the following (your version may vary):","sidebar":"tutorialSidebar"},"tutorial/index":{"id":"tutorial/index","title":"In-Depth Tutorial","description":"This tutorial assumes you have installed Scrut and learned the very basics of the command line. Building on that, you will learn all that you need to write meaningful tests for your own CLI(s).","sidebar":"tutorialSidebar"},"tutorial/next-up":{"id":"tutorial/next-up","title":"Next Up","description":"Well done! You have learned how to use Scrut to write tests for your CLI.","sidebar":"tutorialSidebar"},"tutorial/output-expectations":{"id":"tutorial/output-expectations","title":"Output Expectations","description":"Smoke tests are useful for identifying if a program is broken, but they don\'t confirm correct functionality. When running commands manually in the terminal, the initial check for correct operation is through their output: does it match expectations, or are there error messages?","sidebar":"tutorialSidebar"},"tutorial/test-bootstrapping":{"id":"tutorial/test-bootstrapping","title":"Test Bootstrapping","description":"This tutorial has produced two test documents: smoke.md and expectations.md. These documents do not extensively cover the functionality of jq. While this is not the primary goal of the tutorial, in real-world scenarios with complex CLIs that export numerous functions, having many test documents is common. An issue that arises from large number of documents is repetition.","sidebar":"tutorialSidebar"},"tutorial/test-configuration":{"id":"tutorial/test-configuration","title":"Test Configuration","description":"So far we have seen how to write test documents, how to execute them and how to work with the test environment. Once the rubber hits the road you will likely run into situations where you need to control the test execution behavior more closely. Scrut provides two ways of doing so:","sidebar":"tutorialSidebar"},"tutorial/test-environment":{"id":"tutorial/test-environment","title":"Test Environment","description":"In the previous chapter a test was created that validates the output of a jq expression with input from the Github API. Using glob output expectations made the test stable, but at the cost of losing precision. This chapter explains how both stability and precision can be achieved.","sidebar":"tutorialSidebar"},"tutorial/test-maintenance":{"id":"tutorial/test-maintenance","title":"Test Maintenance","description":"Tests are dynamic and require ongoing maintenance due to changes in CLI functionality or dependencies. In Scrut test documents, even if shell expressions remain constant, output expectations may need updates. Or sometimes shell expression must be changed which yield different output. The scrut update command simplifies this process by automatically updating invalid output expectations.","sidebar":"tutorialSidebar"},"tutorial/what-to-test":{"id":"tutorial/what-to-test","title":"What to test?","description":"CLIs are as diverse as the tasks they are designed to perform. The tests that validate an individual CLI must be tailored to the specific features and use-cases. On a very high level Scrut is designed to support the following types of tests:","sidebar":"tutorialSidebar"}}}}')}}]);