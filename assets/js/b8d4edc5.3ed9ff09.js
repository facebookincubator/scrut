(self.webpackChunkstaticdocs_starter=self.webpackChunkstaticdocs_starter||[]).push([[853],{38522:(e,s,t)=>{"use strict";t.r(s),t.d(s,{assets:()=>p,contentTitle:()=>h,default:()=>f,frontMatter:()=>d,metadata:()=>u,toc:()=>x});var n=t(85893),r=t(11151);function i(e){return(0,n.jsx)(n.Fragment,{children:'<Mermaid chart={`\nflowchart TB\n  TestCase["Test Case"]\n  TestCases["Test Case(s)"]\n  Expectations["Expectation(s)"]\n  DiffTool["Diff Tool"]\n  DocumentConfiguration["Document Config"]\n  TestCaseConfiguration["TestCase Config"]\n\n  subgraph Parsing["Phase: Parsing"]\n  Run ---\x3e Parser\n  Parser ---\x3e TestCases\n  Parser ---\x3e DocumentConfiguration\n  end\n\n  subgraph Anatomy["Test Case in Detail"]\n  TestCase ---\x3e ShellExpression\n  TestCase ---\x3e TestCaseConfiguration\n  TestCase ---\x3e Expectations\n  TestCase .-> Title\n  end\n\n  TestCases .-> TestCase\n\n  subgraph Execution["Phase: Execution"]\n  Executor ---\x3e Output\n  end\n\n  DocumentConfiguration ---\x3e Executor\n  TestCaseConfiguration ---\x3e Executor\n  ShellExpression ---\x3e Executor\n\n  subgraph Validation["Phase: Validation"]\n  DiffTool -- expected output ---\x3e OK\n  DiffTool -- unexpected output ---\x3e Error\n  end\n\n  subgraph Presentation["Phase: Presentation"]\n  OK ---\x3e Renderer\n  Error ---\x3e Renderer\n  Renderer ---\x3e Diff["Pretty, human\\nreadable differences"]\n  Renderer ---\x3e Patch["Universal Diff Format"]\n  Renderer ---\x3e YAML\n  Renderer ---\x3e JSON\n  end\n\n  Output ---\x3e DiffTool\n  Expectations ---\x3e DiffTool\n\n  style Anatomy fill:#eee,stroke:#aaa;\n  style TestCase fill:#ddd,stroke:#aaa;\n  style TestCaseConfiguration fill:#ddd,stroke:#aaa;\n  style ShellExpression fill:#ddd,stroke:#aaa;\n  style Expectations fill:#ddd,stroke:#aaa;\n  style Title fill:#ddd,stroke:#aaa;\n  style OK fill:#8f8;\n  style Error fill:#f88;\n`} />'})}function o(e={}){const{wrapper:s}={...(0,r.a)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(i,{...e})}):i()}function a(e){return(0,n.jsx)(n.Fragment,{children:"<Mermaid chart={`\ngraph TD\n\n    user(CLI Owner)\n    create[Create Tests]\n    update[Update Tests]\n    run[Run Tests]\n    cicd(CI/CD)\n\n    user -- manual --\x3e create\n    user -- manual --\x3e update\n    user -- manual --\x3e run\n    user -- automated --\x3e run\n    cicd -- automated ---\x3e run\n`} />"})}function c(e={}){const{wrapper:s}={...(0,r.a)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(a,{...e})}):a()}var l=t(47903);const d={sidebar_position:5},h="Development",u={id:"advanced/development",title:"Development",description:"!! Scrut is still actively developed. Major breaking changes are likely !!",source:"@site/docs/advanced/development.md",sourceDirName:"advanced",slug:"/advanced/development",permalink:"/scrut/docs/advanced/development",draft:!1,unlisted:!1,editUrl:"https://www.internalfb.com/code/fbsource/fbcode/clifoundation/scrut/website/docs/advanced/development.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Specifics",permalink:"/scrut/docs/advanced/specifics"}},p={},x=[{value:"Use Cases",id:"use-cases",level:2},{value:"Create Tests",id:"create-tests",level:3},{value:"Update Tests",id:"update-tests",level:3},{value:"Run Tests",id:"run-tests",level:3},{value:"Architecture",id:"architecture",level:2},{value:"Phase: Parsing",id:"phase-parsing",level:3},{value:"Phase: Execution",id:"phase-execution",level:3},{value:"Phase: Validation",id:"phase-validation",level:3},{value:"Phase: Presentation",id:"phase-presentation",level:3}];function m(e){const s={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.h1,{id:"development",children:"Development"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"!! Scrut is still actively developed. Major breaking changes are likely !!"})}),"\n",(0,n.jsx)(s.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,n.jsx)(s.p,{children:"Scrut is a command line program that solves the following use-cases for developers / owners of command line programs:"}),"\n",(0,n.jsx)(c,{}),"\n",(0,n.jsx)(s.h3,{id:"create-tests",children:"Create Tests"}),"\n",(0,n.jsx)(s.p,{children:"Make it easy for owners to create tests for their CLIs. Accept arbitrary commands (or more complex shell expressions), execute them and create formatted tests from the resulting output."}),"\n",(0,n.jsxs)(s.p,{children:["Test Case generation is described by the ",(0,n.jsx)("a",{href:l.customFields.ossRepoUrl+"/blob/main/src/generators/generator.rs",children:(0,n.jsx)(s.code,{children:"TestCaseGenerator"})})," trait and implemented in the respective format in the same ",(0,n.jsx)("a",{href:l.customFields.ossRepoUrl+"/blob/main/src/generators",children:"folder"}),"."]}),"\n",(0,n.jsx)(s.h3,{id:"update-tests",children:"Update Tests"}),"\n",(0,n.jsx)(s.p,{children:"Make it easy for owners to maintain the tests of their CLIs. Automate update of previously created test files when the expected output changes."}),"\n",(0,n.jsxs)(s.p,{children:["The generation of the update is described by the ",(0,n.jsx)("a",{href:l.customFields.ossRepoUrl+"/blob/main/src/generators/generator.rs",children:(0,n.jsx)(s.code,{children:"UpdateGenerator"})})," trait and implemented in the respective format in the same ",(0,n.jsx)("a",{href:l.customFields.ossRepoUrl+"/blob/main/src/generators",children:"folder"}),"."]}),"\n",(0,n.jsx)(s.h3,{id:"run-tests",children:"Run Tests"}),"\n",(0,n.jsx)(s.p,{children:"Run previously persisted tests, so to prove that a CLI works within expectations. Owners can do this either manually, or automated from integration with their development tooling. The same tests should be run by automated continuous integration systems."}),"\n",(0,n.jsx)(s.h2,{id:"architecture",children:"Architecture"}),"\n",(0,n.jsx)(s.p,{children:"The architecture of Scrut is best explained by following the process flow of the primary use case: executing tests."}),"\n",(0,n.jsx)(o,{}),"\n",(0,n.jsx)(s.h3,{id:"phase-parsing",children:"Phase: Parsing"}),"\n",(0,n.jsxs)(s.p,{children:["Scrut tests are stored either in ",(0,n.jsx)("a",{href:l.customFields.ossRepoUrl+"/blob/main/src/parsers/markdown.rs",children:(0,n.jsx)(s.code,{children:"Markdown"})})," or ",(0,n.jsx)("a",{href:l.customFields.ossRepoUrl+"/blob/main/src/parsers/cram.rs",children:(0,n.jsx)(s.code,{children:"Cram"})})," files. Each file can contain multiple tests, which are called ",(0,n.jsx)("a",{href:l.customFields.ossRepoUrl+"/blob/main/src/testcase.rs",children:(0,n.jsx)(s.strong,{children:"Test Cases"})})," and which consist of:"]}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Title"})," that explains to a human what this case is intended to prove"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Shell Expression"})," is an arbitrary command or multiple chained commands, that result in a single result (exit code and output). For example: ",(0,n.jsx)(s.code,{children:"date"}),", ",(0,n.jsx)(s.code,{children:"date | awk '{print $1}'"})," and ",(0,n.jsx)(s.code,{children:"date && date"})]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)("a",{href:l.customFields.ossRepoUrl+"/blob/main/src/expectation.rs",children:(0,n.jsx)(s.strong,{children:"Expectations"})}),' is a list of predictions in the form of rules that describe the output. For example: "',(0,n.jsxs)(s.em,{children:["Output is exactly ",(0,n.jsx)(s.code,{children:"Hello World"})]}),'" or "',(0,n.jsxs)(s.em,{children:["Output start with ",(0,n.jsx)(s.code,{children:"foo"})]}),'"']}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Exit Code"})," is the numeric code with which the shell expressions is expected to end (defaults to OK, aka ",(0,n.jsx)(s.code,{children:"0"}),")"]}),"\n"]}),"\n",(0,n.jsx)(s.p,{children:"The Parsing phase extracts all testcases from the provided test file(s)."}),"\n",(0,n.jsx)(s.h3,{id:"phase-execution",children:"Phase: Execution"}),"\n",(0,n.jsxs)(s.p,{children:["The shell expression of the testcase needs to be executed in order to decide whether the output matches expectations. The ",(0,n.jsx)("a",{href:l.customFields.ossRepoUrl+"/blob/main/src/executors/executor.rs",children:(0,n.jsx)(s.code,{children:"Executor"})})," is responsible to run a set of shell expressions. The ",(0,n.jsx)("a",{href:l.customFields.ossRepoUrl+"/blob/main/src/executors/stateful_executor.rs",children:(0,n.jsx)(s.code,{children:"StatefulExecutor"})})," is currently used for executing Markdown files, and the ",(0,n.jsx)("a",{href:l.customFields.ossRepoUrl+"/blob/main/src/executors/bash_script_executor.rs",children:(0,n.jsx)(s.code,{children:"BashScriptExecutor"})})," to execute Cram files."]}),"\n",(0,n.jsxs)(s.p,{children:["The execution phase results in one ",(0,n.jsx)("a",{href:l.customFields.ossRepoUrl+"/blob/main/src/output.rs",children:(0,n.jsx)(s.code,{children:"Output"})})," per testcase, that captures STDOUT, STDERR and the exit code."]}),"\n",(0,n.jsx)(s.h3,{id:"phase-validation",children:"Phase: Validation"}),"\n",(0,n.jsx)(s.p,{children:"The output of execution for each testcase is checked against the expectations of the testcase. If the exit code mismatches, then the validation is immediately considered a failure and ends in an error."}),"\n",(0,n.jsxs)(s.p,{children:["If the exit code matches, then the output is compared line-by-line with the expectations by the ",(0,n.jsx)("a",{href:l.customFields.ossRepoUrl+"/blob/main/src/diff.rs",children:(0,n.jsx)(s.code,{children:"DiffTool"})}),". If any comparison ends in the following states, then the whole validation is considered a failure:"]}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.em,{children:"Unmatched Expectation"}),": An expectation does not match any output line"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.em,{children:"Unexpected Output"}),": One or more lines of the output cannot be matched"]}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"phase-presentation",children:"Phase: Presentation"}),"\n",(0,n.jsx)(s.p,{children:"Lastly the the outcome of the previous validation is renderer it into either a human readable diff-like text or a machine interpretable interchange format (JSON or YAML)."})]})}function f(e={}){const{wrapper:s}={...(0,r.a)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(m,{...e})}):m(e)}},47903:e=>{e.exports={customFields:{fbRepoName:"fbsource",ossRepoPath:"fbcode/clifoundation/scrut/website",ossRepoUrl:"https://github.com/facebookincubator/scrut"}}},11151:(e,s,t)=>{"use strict";t.d(s,{Z:()=>a,a:()=>o});var n=t(67294);const r={},i=n.createContext(r);function o(e){const s=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),n.createElement(i.Provider,{value:s},e.children)}}}]);