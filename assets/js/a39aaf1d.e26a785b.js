"use strict";(self.webpackChunkstaticdocs_starter=self.webpackChunkstaticdocs_starter||[]).push([[7227],{24996:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"getting-started/first-steps","title":"First Steps","description":"Now that you have a scrut binary installed the fun can begin.","source":"@site/docs/getting-started/first-steps.md","sourceDirName":"getting-started","slug":"/getting-started/first-steps","permalink":"/scrut/docs/getting-started/first-steps","draft":false,"unlisted":false,"editUrl":"https://www.internalfb.com/code/fbsource/fbcode/clifoundation/scrut/website/docs/getting-started/first-steps.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Installation","permalink":"/scrut/docs/getting-started/installation"},"next":{"title":"In-Depth Tutorial","permalink":"/scrut/docs/tutorial/"}}');var i=n(74848),d=n(28453),r=n(51112);const l={sidebar_position:2},o="First Steps",a={},c=[...r.RM,{value:"Create your first test",id:"create-your-first-test",level:2},{value:"What just happened?",id:"what-just-happened",level:2},{value:"Fix it!",id:"fix-it",level:2},{value:"Next Up",id:"next-up",level:2}];function h(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,d.R)(),...e.components},{FbInternalOnly:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("FbInternalOnly",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"first-steps",children:"First Steps"})}),"\n",(0,i.jsx)(n,{children:(0,i.jsx)(r.Ay,{})}),"\n",(0,i.jsxs)(t.p,{children:["Now that you have a ",(0,i.jsxs)(t.a,{href:"/docs/getting-started/installation",children:[(0,i.jsx)(t.code,{children:"scrut"})," binary installed"]})," the fun can begin."]}),"\n",(0,i.jsx)(t.h2,{id:"create-your-first-test",children:"Create your first test"}),"\n",(0,i.jsxs)(t.p,{children:["Create a new directory you want to work in.\nThen create a markdown file named ",(0,i.jsx)(t.code,{children:"getting-started.md"})," in that directory with the following contents:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-markdown",metastring:'title="getting-started.md" showLineNumbers',children:"# Get Testing\n\nAll code blocks marked with `scrut` are tests.\n\n## Hello World\n\n```scrut\n$ echo Hello World\nHello World\n```\n\nThis will work!\n\n## Sad World\n\n```scrut\n$ echo Sad World\nHello World\n```\n\nThis will fail!\n\n## Ignore World\n\n```other\n$ echo Other World\nHello World\n```\n\nThis is ignored.\n"})}),"\n",(0,i.jsx)(t.p,{children:"Don't worry about the contents for now. All will be explained later.\nOpen a terminal in the directory where you created the markdown file and run a test:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",metastring:'title="Terminal"',children:"$ scrut test getting-started.md\n\ud83d\udd0e Found 1 test document(s)\n\u274c getting-started.md: failed 1 out of 2 testcases\n\n// =============================================================================\n// @ getting-started.md:17\n// -----------------------------------------------------------------------------\n// # Sad World\n// -----------------------------------------------------------------------------\n// $ echo Sad World\n// =============================================================================\n\n1     | - Hello World\n   1  | + Sad World\n\n\nResult: 1 document(s) with 2 testcase(s): 1 succeeded, 1 failed and 0 skipped\n"})}),"\n",(0,i.jsx)(t.p,{children:"It failed. Great! That is expected."}),"\n",(0,i.jsx)(t.h2,{id:"what-just-happened",children:"What just happened?"}),"\n",(0,i.jsx)(t.p,{children:"You ran your first test. Let's walk through it, starting with the command you executed:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"$ scrut test getting-started.md\n"})}),"\n",(0,i.jsx)(t.p,{children:"This line should be self-explanatory, but let's be explicit:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"scrut"})," is your previsouly installed Scrut binary"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"test"})," is the subcommand that tells Scrut to run tests"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"getting-started.md"})," is the path to the file you just created, telling Scrut to run the tests defined within"]}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"\ud83d\udd0e Found 1 test document(s)\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Scrut reports that it found one ",(0,i.jsx)(t.em,{children:"test document"}),"."]}),"\n",(0,i.jsx)(t.admonition,{type:"info",children:(0,i.jsxs)(t.p,{children:["Scrut works with files that contains tests. That makes the word ",(0,i.jsx)(t.em,{children:"test"})," ambiguous: Does that refer to the file? Or to a test within the file? To make it clear what is mean Scrut uses ",(0,i.jsx)(t.strong,{children:"document"})," or ",(0,i.jsx)(t.strong,{children:"test document"})," to refer to the file that contains tests and ",(0,i.jsx)(t.strong,{children:"test case"})," to refer to a test within a test document."]})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"\u274c getting-started.md: failed 1 out of 2 testcases\n"})}),"\n",(0,i.jsxs)(t.p,{children:["This line points to a test document (",(0,i.jsx)(t.code,{children:"getting-started.md"}),") and lets you know that one of the two ",(0,i.jsx)(t.em,{children:"test cases"})," in that file have failed."]}),"\n",(0,i.jsxs)(t.p,{children:["Next up is the output that starts with ",(0,i.jsx)(t.code,{children:"//"}),", which you will see whenever there is a failure in a testcase:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"// @ getting-started.md:17\n"})}),"\n",(0,i.jsxs)(t.p,{children:["An error occured in the command that can be found in line 17 of the ",(0,i.jsx)(t.code,{children:"getting-started.md"})," file."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"// # Sad World\n"})}),"\n",(0,i.jsxs)(t.p,{children:["The failing test title (i.e. the headline preceeding the code block, see the ",(0,i.jsx)(t.code,{children:"getting-started.md"})," file above)."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"// $ echo Sad World\n"})}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.em,{children:"shell expression"})," that was executed and ended in failure."]}),"\n",(0,i.jsx)(t.admonition,{type:"info",children:(0,i.jsxs)(t.p,{children:["Scrut calls the commands that are being tested ",(0,i.jsx)(t.strong,{children:"shell expressions"}),". Each test contains a single shell expression. It may span across multiple lines. More about that later."]})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"1     | - Hello World\n"})}),"\n",(0,i.jsxs)(t.p,{children:["The expected output, as defined in ",(0,i.jsx)(t.code,{children:"getting-started.md"})," below the test command.\nThe ",(0,i.jsx)(t.code,{children:"1"})," signifies that this is the first expected output line, measured after the command that is tested (",(0,i.jsx)(t.code,{children:"echo Sad World"}),")."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"   1  | + Sad World\n"})}),"\n",(0,i.jsxs)(t.p,{children:["The actual output, that did not match the expection.\nThe ",(0,i.jsx)(t.code,{children:"1"})," signfies that this is the first output line, measured from the output of the command that is tested (",(0,i.jsx)(t.code,{children:"echo Sad World"}),")."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"Result: 1 document(s) with 2 testcase(s): 2 succeeded, 0 failed and 0 skipped\n"})}),"\n",(0,i.jsxs)(t.p,{children:["The test file contained 2 tests, one succeeded and one failed.\nNote that only the code blocks marked with ",(0,i.jsx)(t.code,{children:"scrut"})," were considered.\nThe last code block in the ",(0,i.jsx)(t.code,{children:"getting-started.md"}),' file that has the "langauge" ',(0,i.jsx)(t.code,{children:"other"})," set was (intentionally) ignored."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"In summary:"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["You told Scrut to run tests in a file (",(0,i.jsx)(t.code,{children:"getting-started.md"}),")"]}),"\n",(0,i.jsx)(t.li,{children:"One of the tests in that file failed"}),"\n",(0,i.jsx)(t.li,{children:"Scrut told you which test failed, where in the file it is and how it did not match the expectations that are defined in the file"}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"fix-it",children:"Fix it!"}),"\n",(0,i.jsxs)(t.p,{children:["To fix the test you need to understand a bit more about the syntax in the ",(0,i.jsx)(t.code,{children:"getting-started.md"})," file.\nHave a look at the second code block in the file that reads:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-markdown",children:"```scrut\n$ echo Sad World\nHello World\n```\n"})}),"\n",(0,i.jsxs)(t.p,{children:["The first line here that starts with a ",(0,i.jsx)(t.code,{children:"$"})," (dollar) sign is, as mentioned before, the ",(0,i.jsx)(t.em,{children:"shell expression"})," of the ",(0,i.jsx)(t.em,{children:"testcase"}),".\nThe next line is what validates the output of the execution. Scrut calls this a ",(0,i.jsx)(t.strong,{children:"output expectation"}),". More on that later."]}),"\n",(0,i.jsxs)(t.p,{children:["You can read the test as following:\n",(0,i.jsxs)(t.em,{children:["When I execute ",(0,i.jsx)(t.code,{children:"echo Sad World"}),", then I expect to see ",(0,i.jsx)(t.code,{children:"Hello World"})," printed."]})]}),"\n",(0,i.jsxs)(t.p,{children:["Obviously that expectation is wrong: The expected output for ",(0,i.jsx)(t.code,{children:"echo Sad World"})," is ",(0,i.jsx)(t.code,{children:"Sad World"}),", not ",(0,i.jsx)(t.code,{children:"Hello World"}),"."]}),"\n",(0,i.jsx)(t.p,{children:"So in order to fix this simple test, all you need to do is align either (not both!) of the following:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Use ",(0,i.jsx)(t.code,{children:"$ echo Hello World"})," as the shell expression."]}),"\n",(0,i.jsxs)(t.li,{children:["Use ",(0,i.jsx)(t.code,{children:"Sad World"})," as the test expectation."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"That means either of the following tests are valid:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-markdown",children:"```scrut\n$ echo Hello World\nHello World\n```\n"})}),"\n",(0,i.jsx)(t.p,{children:"or"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-markdown",children:"```scrut\n$ echo Sad World\nSad World\n```\n"})}),"\n",(0,i.jsxs)(t.p,{children:['Once you have "fixed" the test subsequent ',(0,i.jsx)(t.code,{children:"scrut test"})," execcutions will succeed:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",metastring:'title="Terminal"',children:"$ scrut test getting-started.md\n\ud83d\udd0e Found 1 test document(s)\n\nResult: 1 document(s) with 2 testcase(s): 2 succeeded, 0 failed and 0 skipped\n"})}),"\n",(0,i.jsxs)(t.admonition,{type:"info",children:[(0,i.jsxs)(t.p,{children:["Scrut by default only prints tests that did not succeed. The ",(0,i.jsx)(t.code,{children:"Result:"})," line is always printed and shows you how many documents processed, but if you want to see the tests as they are being processed use the ",(0,i.jsx)(t.code,{children:"--verbose"})," flag:"]}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",metastring:'title="Terminal"',children:"$ scrut test --verbose getting-started.md\n\ud83d\udd0e Found 1 test document(s)\n\u2705 /tmp/getting-started.md: passed 2 testcases\n\nResult: 1 document(s) with 2 testcase(s): 2 succeeded, 0 failed and 0 skipped\n"})})]}),"\n",(0,i.jsx)(t.h2,{id:"next-up",children:"Next Up"}),"\n",(0,i.jsx)(t.p,{children:"Congratulations! You have taken the first step, which is always the hardest."}),"\n",(0,i.jsxs)(t.p,{children:["Go ahead and start with the ",(0,i.jsx)(t.a,{href:"/docs/tutorial",children:"tutorial"}),"."]})]})}function u(e={}){const{wrapper:t}={...(0,d.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>l});var s=n(96540);const i={},d=s.createContext(i);function r(e){const t=s.useContext(d);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(d.Provider,{value:t},e.children)}},51112:(e,t,n)=>{n.d(t,{Ay:()=>l,RM:()=>d});var s=n(74848),i=n(28453);const d=[];function r(e){return(0,s.jsx)(s.Fragment,{})}function l(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(r,{...e})}):r()}}}]);