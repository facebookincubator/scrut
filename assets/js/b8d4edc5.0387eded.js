"use strict";(self.webpackChunkstaticdocs_starter=self.webpackChunkstaticdocs_starter||[]).push([[853],{3905:function(e,t,n){n.r(t),n.d(t,{MDXContext:function(){return d},MDXProvider:function(){return u},mdx:function(){return x},useMDXComponents:function(){return p},withMDXComponents:function(){return c}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(){return o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o.apply(this,arguments)}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=r.createContext({}),c=function(e){return function(t){var n=p(t.components);return r.createElement(e,o({},t,{components:n}))}},p=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(d.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),u=a,h=c["".concat(s,".").concat(u)]||c[u]||m[u]||o;return n?r.createElement(h,i(i({ref:t},d),{},{components:n})):r.createElement(h,i({ref:t},d))}));function x(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var d=2;d<o;d++)s[d]=n[d];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},30241:function(e,t,n){n.r(t),n.d(t,{assets:function(){return g},contentTitle:function(){return v},default:function(){return b},frontMatter:function(){return f},metadata:function(){return y},toc:function(){return C}});var r,a=n(83117),o=n(80102),s=(n(67294),n(3905)),i=["components"],l=(r="Mermaid",function(e){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.mdx)("div",e)}),d={toc:[]};function c(e){var t=e.components,n=(0,o.Z)(e,i);return(0,s.mdx)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,s.mdx)(l,{chart:'\nflowchart TB\n  TestCase["Test Case"]\n  TestCases["Test Case(s)"]\n  Expectations["Expectation(s)"]\n  DiffTool["Diff Tool"]\n  DocumentConfiguration["Document Config"]\n  TestCaseConfiguration["TestCase Config"]\n\n  subgraph Parsing["Phase: Parsing"]\n  Run ---\x3e Parser\n  Parser ---\x3e TestCases\n  Parser ---\x3e DocumentConfiguration\n  end\n\n  subgraph Anatomy["Test Case in Detail"]\n  TestCase ---\x3e ShellExpression\n  TestCase ---\x3e TestCaseConfiguration\n  TestCase ---\x3e Expectations\n  TestCase .-> Title\n  end\n\n  TestCases .-> TestCase\n\n  subgraph Execution["Phase: Execution"]\n  Executor ---\x3e Output\n  end\n\n  DocumentConfiguration ---\x3e Executor\n  TestCaseConfiguration ---\x3e Executor\n  ShellExpression ---\x3e Executor\n\n  subgraph Validation["Phase: Validation"]\n  DiffTool -- expected output ---\x3e OK\n  DiffTool -- unexpected output ---\x3e Error\n  end\n\n  subgraph Presentation["Phase: Presentation"]\n  OK ---\x3e Renderer\n  Error ---\x3e Renderer\n  Renderer ---\x3e Diff["Pretty, human\nreadable differences"]\n  Renderer ---\x3e Patch["Universal Diff Format"]\n  Renderer ---\x3e YAML\n  Renderer ---\x3e JSON\n  end\n\n  Output ---\x3e DiffTool\n  Expectations ---\x3e DiffTool\n\n  style Anatomy fill:#eee,stroke:#aaa;\n  style TestCase fill:#ddd,stroke:#aaa;\n  style TestCaseConfiguration fill:#ddd,stroke:#aaa;\n  style ShellExpression fill:#ddd,stroke:#aaa;\n  style Expectations fill:#ddd,stroke:#aaa;\n  style Title fill:#ddd,stroke:#aaa;\n  style OK fill:#8f8;\n  style Error fill:#f88;\n',mdxType:"Mermaid"}))}c.isMDXComponent=!0;var p=["components"],u=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.mdx)("div",t)}}("Mermaid"),m={toc:[]};function h(e){var t=e.components,n=(0,o.Z)(e,p);return(0,s.mdx)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,s.mdx)(u,{chart:"\ngraph TD\n\n    user(CLI Owner)\n    create[Create Tests]\n    update[Update Tests]\n    run[Run Tests]\n    cicd(CI/CD)\n\n    user -- manual --\x3e create\n    user -- manual --\x3e update\n    user -- manual --\x3e run\n    user -- automated --\x3e run\n    cicd -- automated ---\x3e run\n",mdxType:"Mermaid"}))}h.isMDXComponent=!0;var x=["components"],f={sidebar_position:5},v="Development",y={unversionedId:"advanced/development",id:"advanced/development",title:"Development",description:"!! Scrut is still actively developed. Major breaking changes are likely !!",source:"@site/docs/advanced/development.md",sourceDirName:"advanced",slug:"/advanced/development",permalink:"/scrut/docs/advanced/development",draft:!1,editUrl:"https://www.internalfb.com/code/fbsource/fbcode/clifoundation/scrut/website/docs/advanced/development.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Specifics",permalink:"/scrut/docs/advanced/specifics"}},g={},C=[{value:"Use Cases",id:"use-cases",level:2},{value:"Create Tests",id:"create-tests",level:3},{value:"Update Tests",id:"update-tests",level:3},{value:"Run Tests",id:"run-tests",level:3},{value:"Architecture",id:"architecture",level:2},{value:"Phase: Parsing",id:"phase-parsing",level:3},{value:"Phase: Execution",id:"phase-execution",level:3},{value:"Phase: Validation",id:"phase-validation",level:3},{value:"Phase: Presentation",id:"phase-presentation",level:3}],T={toc:C};function b(e){var t=e.components,n=(0,o.Z)(e,x);return(0,s.mdx)("wrapper",(0,a.Z)({},T,n,{components:t,mdxType:"MDXLayout"}),(0,s.mdx)("h1",{id:"development"},"Development"),(0,s.mdx)("p",null,(0,s.mdx)("strong",{parentName:"p"},"!! Scrut is still actively developed. Major breaking changes are likely !!")),(0,s.mdx)("h2",{id:"use-cases"},"Use Cases"),(0,s.mdx)("p",null,"Scrut is a command line program that solves the following use-cases for developers / owners of command line programs:"),(0,s.mdx)(h,{mdxType:"GraphUseCase"}),(0,s.mdx)("h3",{id:"create-tests"},"Create Tests"),(0,s.mdx)("p",null,"Make it easy for owners to create tests for their CLIs. Accept arbitrary commands (or more complex shell expressions), execute them and create formatted tests from the resulting output."),(0,s.mdx)("p",null,"Test Case generation is described by the ",(0,s.mdx)("a",{parentName:"p",href:"src/generators/generator.rs"},(0,s.mdx)("inlineCode",{parentName:"a"},"TestCaseGenerator"))," trait and implemented in the respective format in the same ",(0,s.mdx)("a",{parentName:"p",href:"src/generators"},"folder"),"."),(0,s.mdx)("h3",{id:"update-tests"},"Update Tests"),(0,s.mdx)("p",null,"Make it easy for owners to maintain the tests of their CLIs. Automate update of previously created test files when the expected output changes."),(0,s.mdx)("p",null,"The generation of the update is described by the ",(0,s.mdx)("a",{parentName:"p",href:"src/generators/generator.rs"},(0,s.mdx)("inlineCode",{parentName:"a"},"UpdateGenerator"))," trait and implemented in the respective format in the same ",(0,s.mdx)("a",{parentName:"p",href:"src/generators"},"folder"),"."),(0,s.mdx)("h3",{id:"run-tests"},"Run Tests"),(0,s.mdx)("p",null,"Run previously persisted tests, so to prove that a CLI works within expectations. Owners can do this either manually, or automated from integration with their development tooling. The same tests should be run by automated continuous integration systems."),(0,s.mdx)("h2",{id:"architecture"},"Architecture"),(0,s.mdx)("p",null,"The architecture of Scrut is best explained by following the process flow of the primary use case: executing tests."),(0,s.mdx)(c,{mdxType:"GraphArchitecture"}),(0,s.mdx)("h3",{id:"phase-parsing"},"Phase: Parsing"),(0,s.mdx)("p",null,"Scrut tests are stored either in ","[Markdown]","{}}src/parsers/markdown.rs) or ",(0,s.mdx)("a",{parentName:"p",href:"src/parsers/cram.rs"},"Cram")," files. Each file can contain multiple tests, which are called ",(0,s.mdx)("a",{parentName:"p",href:"src/testcase.rs"},(0,s.mdx)("strong",{parentName:"a"},"Test Cases"))," and which consist of:"),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"Title")," that explains to a human what this case is intended to prove"),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"Shell Expression")," is an arbitrary command or multiple chained commands, that result in a single result (exit code and output). For example: ",(0,s.mdx)("inlineCode",{parentName:"li"},"date"),", ",(0,s.mdx)("inlineCode",{parentName:"li"},"date | awk '{print $1}'")," and ",(0,s.mdx)("inlineCode",{parentName:"li"},"date && date")),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("a",{parentName:"li",href:"src/expectation.rs"},(0,s.mdx)("strong",{parentName:"a"},"Expectations")),' is a list of predictions in the form of rules that describe the output. For example: "',(0,s.mdx)("em",{parentName:"li"},"Output is exactly ",(0,s.mdx)("inlineCode",{parentName:"em"},"Hello World")),'" or "',(0,s.mdx)("em",{parentName:"li"},"Output start with ",(0,s.mdx)("inlineCode",{parentName:"em"},"foo")),'"'),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"Exit Code")," is the numeric code with which the shell expressions is expected to end (defaults to OK, aka ",(0,s.mdx)("inlineCode",{parentName:"li"},"0"),")")),(0,s.mdx)("p",null,"The Parsing phase extracts all testcases from the provided test file(s)."),(0,s.mdx)("h3",{id:"phase-execution"},"Phase: Execution"),(0,s.mdx)("p",null,"The shell expression of the testcase needs to be executed in order to decide whether the output matches expectations. The ",(0,s.mdx)("a",{parentName:"p",href:"src/executors/executor.rs"},(0,s.mdx)("inlineCode",{parentName:"a"},"Executor"))," is responsible to run a set of shell expressions ",(0,s.mdx)("a",{parentName:"p",href:"src/executors/sequential_shell.rs"},"sequentially with the (",(0,s.mdx)("inlineCode",{parentName:"a"},"SequentialShellExecutor"),")"),". There is also a currently unused implementation ",(0,s.mdx)("a",{parentName:"p",href:"src/executors/parallel_shell.rs"},"for pallel execution in (",(0,s.mdx)("inlineCode",{parentName:"a"},"ParallelShellExecutor"),")")," - warning: it's not a good idea."),(0,s.mdx)("p",null,"The execution phase results in one ",(0,s.mdx)("a",{parentName:"p",href:"src/output.rs"},(0,s.mdx)("inlineCode",{parentName:"a"},"Output"))," per testcase, that captures STDOUT, STDERR and the exit code."),(0,s.mdx)("h3",{id:"phase-validation"},"Phase: Validation"),(0,s.mdx)("p",null,"The output of execution for each testcase is checked against the expectations of the testcase. If the exit code mismatches, then the validation is immediately considered a failure and ends in an error."),(0,s.mdx)("p",null,"If the exit code matches, then the output is compared line-by-line with the expectations by the ",(0,s.mdx)("a",{parentName:"p",href:"src/diff.rs"},(0,s.mdx)("inlineCode",{parentName:"a"},"DiffTool")),". If any comparison ends in the following states, then the whole validation is considered a failure:"),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("em",{parentName:"li"},"Unmatched Expectation"),": An expectation does not match any output line"),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("em",{parentName:"li"},"Unexpected Output"),": One or more lines of the output cannot be matched")),(0,s.mdx)("h3",{id:"phase-presentation"},"Phase: Presentation"),(0,s.mdx)("p",null,"Lastly the the outcome of the previous validation is renderer it into either a human readable diff-like text or a machine interpretable interchange format (JSON or YAML)."))}b.isMDXComponent=!0}}]);