"use strict";(self.webpackChunkstaticdocs_starter=self.webpackChunkstaticdocs_starter||[]).push([[8869],{28453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>c});var s=t(96540);const i={},r=s.createContext(i);function d(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),s.createElement(r.Provider,{value:n},e.children)}},56466:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>d,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"reference/fundamentals/inline-configuration","title":"Inline Configuration","description":"Scrut support two kinds of inline configuration syntax:","source":"@site/docs/reference/fundamentals/inline-configuration.md","sourceDirName":"reference/fundamentals","slug":"/reference/fundamentals/inline-configuration","permalink":"/scrut/docs/reference/fundamentals/inline-configuration","draft":false,"unlisted":false,"editUrl":"https://www.internalfb.com/code/fbsource/fbcode/clifoundation/scrut/website/docs/reference/fundamentals/inline-configuration.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Environment Variables","permalink":"/scrut/docs/reference/fundamentals/environment-variables"},"next":{"title":"Output Expectations","permalink":"/scrut/docs/reference/fundamentals/output-expectations"}}');var i=t(74848),r=t(28453);const d={},c="Inline Configuration",o={},a=[{value:"Example",id:"example",level:2},{value:"Test Document Configuration",id:"test-document-configuration",level:2},{value:"Test Case Configuration",id:"test-case-configuration",level:2},{value:"Wait Configuration",id:"wait-configuration",level:3}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"inline-configuration",children:"Inline Configuration"})}),"\n",(0,i.jsx)(n.p,{children:"Scrut support two kinds of inline configuration syntax:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Per Test Document"})," (document-wide) configuration, which can be defined at the start of the ",(0,i.jsx)(n.a,{href:"/docs/reference/fundamentals/test-document/",children:"test document"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Per Test Case"})," (test-case-wide) configuration, which can be defined with each individual ",(0,i.jsx)(n.a,{href:"/docs/reference/fundamentals/test-case/",children:"test case"})]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsxs)(n.p,{children:["This configuration method is only supported for test documents using the ",(0,i.jsx)(n.a,{href:"/docs/reference/formats/markdown-format/",children:"Markdown format"}),". There is no equivalent in the  ",(0,i.jsx)(n.a,{href:"/docs/reference/formats/cram-format/",children:"Cram format"}),"."]})}),"\n",(0,i.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markdown",metastring:'title="example.md" showLineNumbers',children:"---\n# optional document-wide YAML configuration\ntotal_timeout: 30s\n---\n\n# The test document\n\nThe initial block that is initialized with `---` and terminated with `---` contains\nthe configuration in YAML notation.\n\n## A simple test\n\n```scrut\n$ echo Hello One\nHello One\n```\n\nThe above test does not contain any per-test configuration\n\n## A test with configuration\n\n```scrut {timeout: 10s}\n$ echo Hello Two\nHello Two\n```\n\nThe above test contains per-test configuration\n"})}),"\n",(0,i.jsx)(n.p,{children:"Some inline-configuration attribute can overwritten by parameters provided on the command-line (see below). The order of precedence is:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Command-line parameter"}),"\n",(0,i.jsx)(n.li,{children:"Per Test Case configuration"}),"\n",(0,i.jsx)(n.li,{children:"Per Test Document configuration"}),"\n",(0,i.jsx)(n.li,{children:"Default"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"test-document-configuration",children:"Test Document Configuration"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Name"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Corresponding Command Line Parameter"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"append"})}),(0,i.jsx)(n.td,{children:"list of paths to documents"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"--append-test-file-paths"})}),(0,i.jsxs)(n.td,{children:["Include these paths in order, as if they were part of this document. All tests within the appended paths are appended to the tests defined in this document. Use-case is common/shared test tear-down. Paths must be relative to the current ",(0,i.jsx)(n.code,{children:"$TESTDIR"}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"defaults"})}),(0,i.jsxs)(n.td,{children:["See below ",(0,i.jsx)(n.a,{href:"#test-case-configuration",children:"Test Case Configuration"})]}),(0,i.jsx)(n.td,{children:"n/a"}),(0,i.jsx)(n.td,{children:"Defaults for per-test-case configuration within the test file."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"prepend"})}),(0,i.jsx)(n.td,{children:"list of paths to documents"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"--prepend-test-file-paths"})}),(0,i.jsxs)(n.td,{children:["Include these paths in order, as if they were part of this document. All tests within the prepend paths are prepended to the tests defined in this document. Use-case is common/shared test setup. Paths must be relative to the current ",(0,i.jsx)(n.code,{children:"$TESTDIR"}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"shell"})}),(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"--shell"})}),(0,i.jsxs)(n.td,{children:["The path to the shell. If a full path is not provided, then the command must be in ",(0,i.jsx)(n.code,{children:"$PATH"}),". ",(0,i.jsxs)(n.strong,{children:["Only ",(0,i.jsx)(n.code,{children:"bash"})," compatible shells are currently supported!"]})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"total_timeout"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"https://docs.rs/humantime/latest/humantime/",children:"duration string"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"--timeout-seconds"})}),(0,i.jsx)(n.td,{children:"All tests within the document (including appended and prepended) must finish executing within this time."})]})]})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Defaults (Markdown and Cram)"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"append: []\ndefaults: {}\nprepend: []\nshell: bash\ntotal_timeout: 15m\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"Per-document configuration in documents that are appended or prepended is ignored"})}),"\n",(0,i.jsx)(n.h2,{id:"test-case-configuration",children:"Test Case Configuration"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Name"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Corresponding Command Line Parameter"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"detached"})}),(0,i.jsx)(n.td,{children:"boolean"}),(0,i.jsx)(n.td,{children:"n/a"}),(0,i.jsxs)(n.td,{children:["Tell Scrut that the ",(0,i.jsx)(n.a,{href:"/docs/reference/fundamentals/shell-expression/",children:"shell expression"})," of this test will detach itself, so Scrut will not consider this a test (i.e. no output or exit code evaluation). Purpose is to allow the user to detach a command (like ",(0,i.jsx)(n.code,{children:"nohup some-command &"}),") that is doing something asynchronous (e.g. starting a server to which the tested CLI is a client)."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"environment"})}),(0,i.jsx)(n.td,{children:"object"}),(0,i.jsx)(n.td,{children:"n/a"}),(0,i.jsx)(n.td,{children:"A set of environment variable names and values that will be explicitly set for the test."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"keep_crlf"})}),(0,i.jsx)(n.td,{children:"boolean"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"--keep-output-crlf"})}),(0,i.jsx)(n.td,{children:"Whether CRLF should be translated to LF (=false) or whether CR needs to be explicitly handled (=true)."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"output_stream"})}),(0,i.jsxs)(n.td,{children:["enum (",(0,i.jsx)(n.code,{children:"stdout"}),", ",(0,i.jsx)(n.code,{children:"stderr"}),", ",(0,i.jsx)(n.code,{children:"combined"}),")"]}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"--combine-output"})," and ",(0,i.jsx)(n.code,{children:"--no-combine-output"})]}),(0,i.jsxs)(n.td,{children:["Which output stream to choose when applying ",(0,i.jsx)(n.a,{href:"/docs/reference/fundamentals/output-expectations/",children:"output expectations"}),": ",(0,i.jsx)(n.code,{children:"stdout"})," (all expectations apply to what is printed on STDOUT), ",(0,i.jsx)(n.code,{children:"stderr"})," (all expectations apply to what is printed on STDERR), ",(0,i.jsx)(n.code,{children:"combined"})," (STDOUT and STDERR will combined into a single stream where all expectations are applied on)"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"skip_document_code"})}),(0,i.jsx)(n.td,{children:"positive integer"}),(0,i.jsx)(n.td,{children:"n/a"}),(0,i.jsx)(n.td,{children:"The exit code, that if returned by any test, leads to skipping of the whole document."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"strip_ansi_escaping"})}),(0,i.jsx)(n.td,{children:"bool"}),(0,i.jsx)(n.td,{children:"n/a"}),(0,i.jsx)(n.td,{children:"Whether to remove ANSIC escape characters from the CLI output before validating it."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"timeout"})}),(0,i.jsxs)(n.td,{children:["null or ",(0,i.jsx)(n.a,{href:"https://docs.rs/humantime/latest/humantime/",children:"duration string"})]}),(0,i.jsx)(n.td,{children:"n/a"}),(0,i.jsx)(n.td,{children:"A max execution time a test can run before it is considered failed (and will be aborted)."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"wait"})}),(0,i.jsxs)(n.td,{children:["null or ",(0,i.jsx)(n.a,{href:"https://docs.rs/humantime/latest/humantime/",children:"duration string"})," or ",(0,i.jsx)(n.a,{href:"#wait-configuration",children:"Wait Configuration"})]}),(0,i.jsx)(n.td,{children:"n/a"}),(0,i.jsxs)(n.td,{children:["See ",(0,i.jsx)(n.a,{href:"#wait-configuration",children:"Wait Configuration"})]})]})]})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Defaults (Markdown)"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"detached: false\nenvironment: {}\nkeep_crlf: false\noutput_stream: stdout\nskip_document_code: 80\nstrip_ansi_escaping: false\ntimeout: null\nwait: null\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Defaults (Cram)"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"detached: false\nenvironment: {}\nkeep_crlf: true\noutput_stream: combined\nskip_document_code: 80\nstrip_ansi_escaping: false\ntimeout: null\nwait: null\n"})}),"\n",(0,i.jsx)(n.h3,{id:"wait-configuration",children:"Wait Configuration"}),"\n",(0,i.jsxs)(n.p,{children:["This configuration corresponds to the per-test-case ",(0,i.jsx)(n.code,{children:"detached"})," configuration and helps to write client / server tests where first a server is started (i.e. a test that runs detached) and then a client communicates with the server (i.e. a test that waits)"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Name"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"timeout"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"https://docs.rs/humantime/latest/humantime/",children:"duration string"})}),(0,i.jsx)(n.td,{children:"How long to wait for the test to run."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"path"})}),(0,i.jsx)(n.td,{children:"null or string"}),(0,i.jsxs)(n.td,{children:["If set then the wait will end early once the path exists. This path must be in ",(0,i.jsx)(n.code,{children:"$TMPDIR"})]})]})]})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markdown",children:'# A server/client test example\n\nShow-case how a server/client test that initially starts a server\n\n## Start a server\n\n```scrut {detached: true}\n$ my-server --start && touch "$TMPDIR"/server-started\n```\n\n## Run client test once server is up\n\n```scrut {wait: {timeout: 5m, path: server-started}}\n$ my-client --do-a-thing\n```\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["The path provided with the ",(0,i.jsx)(n.code,{children:"path"})," directive must be relative to ",(0,i.jsx)(n.code,{children:"$TMPDIR"}),"."]})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);